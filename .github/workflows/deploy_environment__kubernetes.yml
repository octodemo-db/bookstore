name: Deploy Environment - Kubernetes

on:
  deployment

env:
  GCP_SDK_VERSION: 312.0.0

jobs:
  deploy_details:
    name: Define Deployment Details

    runs-on: ubuntu-20.04

    outputs:
      container_registry: ${{ steps.deployment_data.outputs.container_registry }}

      app_container_image: ${{ steps.deployment_data.outputs.app_container_image }}
      app_container_version: ${{ steps.deployment_data.outputs.app_container_version }}

      database_container_image: ${{ steps.deployment_data.outputs.database_container_image }}
      database_container_version: ${{ steps.deployment_data.outputs.database_container_version }}

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: Extract Deployment Details and Report Deployment in Progress
        id: deployment_data
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/unpack_deployment_payload.js')
              , deploymentPayload = require(scriptPath);
            ;
            await deploymentPayload(context, core, github).unpackAndStart();


  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-20.04

    needs:
      - deploy_details

    timeout-minutes: 5

    # Set common Terraform execution environment variables
    env:
      TF_VAR_ENVIRONMENT: ${{ github.event.deployment.environment }}

      TF_VAR_app_container: ${{ needs.deploy_details.outputs.app_container_image }}
      TF_VAR_app_container_version: ${{ needs.deploy_details.outputs.app_container_version }}

      TF_VAR_database_container: ${{ needs.deploy_details.outputs.database_container_image }}
      TF_VAR_database_container_version: ${{ needs.deploy_details.outputs.database_container_version }}

      KUBE_SYSTEM: gke

      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
      GKE_ZONE: ${{ secrets.GKE_CLUSTER_LOCATION }}

      # Directory that contains Terraform HCL to run
      TERRAFORM_WORKING_DIRECTORY: ./terraform/kubernetes

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.13.5
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: 0.26.2

      - name: Sign in to Google Cloud Platform
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCP_SDK_VERSION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_TERRAFORM_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Authenticate with Kubernetes Cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Terraform - init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt init

      - name: Terraform - validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt validate

      - name: Terraform - plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt plan

      - name: Terraform - apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt apply -auto-approve

      - name: Get Website URL from Terrafom State
        id: terraform_output
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terraform output website_url

      - name: Report Success
        uses: actions/github-script@v3
        env:
          environment_url: ${{ steps.terraform_output.outputs.stdout }}
        with:
          script: |
            const scriptPath = require('path').resolve('./.github/workflows/scripts/deploymentManager.js')
              , DeploymentManager = require(scriptPath)
              ;

            const manager = new DeploymentManager(context, github);
            await manager.activateDeployment(context.payload.deployment.id, process.env.environment_url);

      - name: Report Failure
        if: failure()
        uses: octokit/request-action@v1.x
        with:
          route: POST /repos/:owner/:repo/deployments/:deployment_id/statuses
          deployment_id: ${{ github.event.deployment.id }}
          description: "Deploy failed for ${{ github.event.deployment.environment }}"
          environment: ${{ github.event.deployment.environment }}
          state: "failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
